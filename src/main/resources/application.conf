
# Settings for the DistributedPubSubExtension
akka {

  # stdout-loglevel = "OFF"
  # loglevel = "OFF"
  loglevel = "INFO"

  log-dead-letters = 0
  log-dead-letters-during-shutdown = off

  actor {
    # Actors are created somewhere in the cluster.
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    log-remote-lifecycle-events = on
    log-received-messages = on
    untrusted-mode = off
    netty.tcp {
      hostname = "127.0.0.1"
      # Remoting uses a random host port.
      port = 2552
    }

  }

  cluster {

    gossip-interval = 10 s
    leader-actions-interval = 10 s
    unreachable-nodes-reaper-interval = 10 s

    failure-detector {
      heartbeat-interval = 10 s
      acceptable-heartbeat-pause = 30 s
      threshold = 10.0
    }
    metrics.enabled=off

    # mannually join seed nodes in AkkaService

    seed-nodes = ["akka.tcp://christmas@127.0.0.1:2552"]

    allow-local-routees = on

    seed-node-timeout = 30s
    retry-unsuccessful-join-after = 10s
    auto-down-unreachable-after = 60s

  }

  contrib.cluster.pub-sub {
    # Actor name of the mediator actor, /user/distributedPubSubMediator
    name = distributedPubSubMediator

    # Start the mediator on members tagged with this role.
    # All members are used if undefined or empty.
    role = ""

    # The routing logic to use for 'Send'
    # Possible values: random, round-robin, broadcast
    routing-logic = random

    # How often the DistributedPubSubMediator should send out gossip information
    gossip-interval = 1s

    # Removed entries are pruned after this duration
    removed-time-to-live = 120s

    # Maximum number of elements to transfer in one message when synchronizing the registries.
    # Next chunk will be transferred in next round of gossip.
    max-delta-elements = 3000

    # The timeout that is added as an implicit by DefaultTimeout trait
    default-timeout = 5s

  }

  extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]



}

